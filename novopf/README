
	Configurar log4net
	Configurar tratamento de excecao nos controllers (try/catch)
	Tratar as strings de conexao em arquivos de configuracao
	monitorar a fila do rabbitMQ


Testando a aplicação
	- Abrir 4 terminais
	
	Sistema Usuario			Consulta Log
	Consumo Mensagem		ApiMonitoração





Puc.ProjetoFinal.ApiMonitoracao
	launchSettings.json

//"applicationUrl": "https://localhost:5001;http://localhost:5000",




- Selecionar Pasta para projeto

- Abrir Terminal Integrado

- Para criar um novo projeto Console, digitar no Terminal Integrado: $> dotnet new console

- Para dar build no programa, digitar no Terminal Integrado:  $> dotnet build

- Para rodar o programa, digitar no Terminal Integrado:  $> dotnet run

- Para debugar, abra a ABA DEBUG (Painel Esquerda), e clique na seta verde; ou
	- Pressione F5


- Comandos básicos

	$> dotnet build
	
	$> dotnet restore


- .Net Core
|https://www.microsoft.com/net/download/dotnet-core/2.1


- Criando uma Web API .Net Core
https://docs.microsoft.com/pt-br/aspnet/core/tutorials/web-api-vsc?view=aspnetcore-2.1
	
	$> mkdir Puc.ProjetoFinal
	
	$> cd Puc.ProjetoFinal

	$> dotnet new sln



	$> dotnet new classlib -f netcoreapp2.1 -o Puc.ProjetoFinal.Negocio
	
	$> dotnet sln Puc.ProjetoFinal.sln add Puc.ProjetoFinal.Negocio/Puc.ProjetoFinal.Negocio.csproj
	
	$> cd Puc.ProjetoFinal.Negocio
	
	$> dotnet add package System.Data.SqlClient

	$> dotnet add package Microsoft.EntityFrameworkCore.Design
	
	$> dotnet add package Microsoft.EntityFrameworkCore.Tools 
	
	$> dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
	
	$> dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL.Design
	
	$> cd ..
	


	$> dotnet new xunit -f netcoreapp2.1 -o Puc.ProjetoFinal.Test
	
	$> dotnet sln Puc.ProjetoFinal.sln add Puc.ProjetoFinal.Test/Puc.ProjetoFinal.Test.csproj
	
	$> cd Puc.ProjetoFinal.Test
	
	$> dotnet add reference ../Puc.ProjetoFinal.Negocio/Puc.ProjetoFinal.Negocio.csproj

	$> dotnet add package System.Data.SqlClient

	$> dotnet add package Microsoft.EntityFrameworkCore.Design
	
	$> dotnet add package Microsoft.EntityFrameworkCore.Tools
	
	$> dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
	
	$> dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL.Design

	$> cd ..
	


	$> dotnet new mvc -f netcoreapp2.1 -o Puc.ProjetoFinal.SistemaUsuario
	
	$> dotnet sln Puc.ProjetoFinal.sln add Puc.ProjetoFinal.SistemaUsuario/Puc.ProjetoFinal.SistemaUsuario.csproj
	
	$> cd Puc.ProjetoFinal.SistemaUsuario
	
	$> dotnet add reference ../Puc.ProjetoFinal.Negocio/Puc.ProjetoFinal.Negocio.csproj
	
	$> dotnet add package Microsoft.EntityFrameworkCore -v 2.1.8

	$> dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
	
	$> dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL.Design
	
	$> dotnet add package System.Runtime.Serialization.Json -v 4.3.0

	$> cd ..

	
	
	$> dotnet new mvc -f netcoreapp2.2 -o Puc.ProjetoFinal.ConsultaLog
	
	$> dotnet sln Puc.ProjetoFinal.sln add Puc.ProjetoFinal.ConsultaLog/Puc.ProjetoFinal.ConsultaLog.csproj
	
	$> cd Puc.ProjetoFinal.ConsultaLog
	
	$> dotnet add package System.Runtime.Serialization.Json -v 4.3.0

	$> cd ..
	
	
	
	$> dotnet new webapi -o Puc.ProjetoFinal.ApiMonitoracao
	
	$> dotnet sln Puc.ProjetoFinal.sln add Puc.ProjetoFinal.ApiMonitoracao/Puc.ProjetoFinal.ApiMonitoracao.csproj
	
	$> cd Puc.ProjetoFinal.ApiMonitoracao
	
	$> dotnet add reference ../Puc.ProjetoFinal.Negocio/Puc.ProjetoFinal.Negocio.csproj
	
	$> dotnet add reference ../Puc.ProjetoFinal.Mensageria/Puc.ProjetoFinal.Mensageria.csproj

	$> dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
	
	$> dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL.Design
	
	$> dotnet add package log4net

	$> dotnet add package Swashbuckle.AspNetCore7
	
	$> dotnet add package Newtonsoft.Json --version 12.0.1

	$> cd ..
	
	$> curl https://localhost:5001/api/values
	
	
	
	$> dotnet new cvonsole -o Puc.ProjetoFinal.ServicoProcessamento
	
	$> dotnet sln Puc.ProjetoFinal.sln add Puc.ProjetoFinal.ServicoProcessamento/Puc.ProjetoFinal.ServicoProcessamento.csproj
	
	$> cd Puc.ProjetoFinal.ServicoProcessamento
	
	$> dotnet add reference ../Puc.ProjetoFinal.Negocio/Puc.ProjetoFinal.Negocio.csproj
	
	$> dotnet add reference ../Puc.ProjetoFinal.Mensageria/Puc.ProjetoFinal.Mensageria.csproj
	
	$> dotnet add package System.Data.SqlClient

	$> dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
	
	$> dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL.Design

	$> dotnet add package RabbitMQ.Client --version 5.1.0
	
	
	
	
	
	$> dotnet new classlib -f netcoreapp2.2 -o Puc.ProjetoFinal.Mensageria
	
	$> dotnet sln Puc.ProjetoFinal.sln add Puc.ProjetoFinal.Mensageria/Puc.ProjetoFinal.Mensageria.csproj
	
	$> cd Puc.ProjetoFinal.Mensageria
	
	$> dotnet add reference ../Puc.ProjetoFinal.Negocio/Puc.ProjetoFinal.Negocio.csproj
	
	$> dotnet add package RabbitMQ.Client --version 5.1.0
	
	$> dotnet add package Newtonsoft.Json --version 12.0.1
	
	$> cd ..
	
	

https://localhost:5001/api/cadinformacao/1

https://localhost:5001/api/cadinformacao/recentes/5


https://localhost:5001/swagger/index.html



{
  "nomeSistema": "eSocial",
  "tipoInformacao": "ERRO",
  "ticket": "20190407193600ABCDEF",
  "descricao": "Teste Mensagem"
}


{
  "nomeSistema": "DCTF",
  "tipoInformacao": "Aviso",
  "ticket": "201904082216ABCDEF",
  "descricao": "Informacao Teste 1"
}


{"NomeSistema":"eSocial","TipoInformacao":"ERRO","Ticket":"20190407193600ABCDEF","Descricao":"Teste Mensagem 10"}



curl -X GET "https://localhost:5001/api/CadInformacao/10" -H "accept: application/json"

curl -X POST "https://localhost:5001/api/CadInformacao" -H "accept: application/json" -H "Content-Type: application/json-patch+json" -d "{ \"nomeSistema\": \"Web\", \"tipoInformacao\": \"Info\", \"ticket\": \"201904072234abcdef\", \"descricao\": \"teste web 30\"}"


	

- Entity Framework Core
	
	https://www.learnentityframeworkcore.com/configuration/data-annotation-attributes/key-attribute

	- Dependencias Postgresql
	
		$> dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
	
		$> dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL.Design


- Criando novos projetos 
	https://docs.microsoft.com/pt-br/dotnet/core/tools/dotnet-new?tabs=netcore21

- Criando uma solution
	https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-sln

	dotnet sln [<SOLUTION_NAME>] add <PROJECT> <PROJECT> ...
	dotnet sln todo.sln add todo-app/todo-app.csproj

	dotnet sln [<SOLUTION_NAME>] remove <PROJECT> <PROJECT> ...
	dotnet sln todo.sln remove todo-app/todo-app.csproj

	dotnet sln [<SOLUTION_NAME>] list
	dotnet sln [-h|--help]




- Postgresql
	- Instalando
		$> sudo apt-get install postgresql postgresql-contrib
		.....
		$> sudo apt-get install pgadmin3

	- Alterne para a conta postgres no seu servidor digitando:
		$> sudo -i -u postgres

	- Agora você pode acessar o prompt do Postgres imediatamente digitando:
		$> psql

	- Você também pode executar o comando que você gostaria com a conta postgres diretamente com sudo.
		$> sudo -u postgres psql

	- Alterar senha do usuario postgres
		$> psql
		$> postgres=# ALTER USER postgres PASSWORD 'postgres';


- Estaleiro

https://console.estaleiro.serpro.gov.br/

https://estaleiro.gitpages.serpro/Documentacao/

https://estaleirotutorial.estaleiro.serpro.gov.br/

https://git.serpro/Estaleiro/Demandas/issues/

- Git

SSH_AUTH_SOCK=0 ssh -T git@git.serpro
git config --global user.name "Julio Cesar Pereira Antunes"
git config --global user.email "julio.antunes@serpro.gov.br"
git init
git remote add origin git@git.serpro:de607/esocial-estatistica.git
git add .
git commit -m "Initial commit"
SSH_AUTH_SOCK=0 git push -u origin master


	- Para criar um novo repositório
	git init

	- Para baixar o repositorio
	git clone git@git.serpro:de607/esocial-estatistica.git

	- Conectar o repositorio local com o respoitorio master
	git remote add origin git@git.serpro:de607/esocial-estatistica.git

	- Adicionar mudanças no workspace (index, stage)
	git add *

	- Comitar as mudanças no worlspace
	git commit -m ""

	- Enviar para o repositorio local
	SSH_AUTH_SOCK=0 git push -u origin master

	- Atualizando o repositorio
	git pull

	- Visualizar alterações
	git diff

	- Historico das alterações
	git log








================= RabbitMQ (http://www.rabbitmq.com/management.html) ================= 

	https://medium.com/@renato.groffe/net-core-mensageria-exemplos-utilizando-rabbitmq-e-azure-service-bus-66a81d02a731
	
	Fila: "puc.projetofinal.apimonitoracao"

	
	- RabbitMQ
	
	$> sudo apt-get install rabbitmq-server
	
	$> dotnet add package RabbitMQ.Client --version 5.1.0
	

	API
		http://localhost:15672/api/
		
	Listando Filas
		$> sudo rabbitmqctl list_queues

	Habilitando plugins
		$> sudo rabbitmq-plugins enable rabbitmq_management


	Numero de Mensagens na fila
		$> sudo rabbitmqctl list_queues | grep 'puc.projetofinal.apimonitoracao'
		
	Consultar Fila
		$> rabbitmqadmin get queue='puc.projetofinal.apimonitoracao' requeue=true count=10	

	Consultar Filas
		$> sudo rabbitmqadmin list queues



================= IONIC (https://ionicframework.com/docs/installation/cdn) =================


https://dashboard.ionicframework.com/hub

https://developer.android.com/studio/run/device


- Instalaram IONIC framework
$> sudo npm config set strict-ssl false

$> sudo npm install -g ionic

- Lista templates ionic
$> ionic start --list

- Criando um APP usando o template tabs
$> ionic start myApp tabs

$> cd myApp

$> ionic serve





===================NPM, NPX, NODE ======================

 sudo apt-get install qemu-kvm
 ls -la /dev/kvm
  grep kvm /etc/group
  sudo adduser julio kvm
  grep kvm /etc/group
 
 ionic start myAppMenu sidemenu
 cd myAppMenu/
 ionic serve
 
 ionic integrations enable capacitor
 sudo npm install npm@latest -g
 sudo npm install -g npx
 npx cap init
 sudo npx cap add android

 sudo npm install ws@3.3.2 --save-dev --save-exact
 npx cap open android

 npm install -g ionic@beta




